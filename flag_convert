#!/usr/bin/env python
import os
import glob
import sys
from argparse import ArgumentParser
from typing import List, AnyStr, Dict, Tuple
from PIL import Image
import matplotlib.pyplot as plt

VALID_FILE_TYPES = ["png"]
INVALID_DIRECTORIES = ["venv", "output"]
PERCENTAGE_THRESHOLD = 0.5


def glob_files(dir: str, substr: str = None) -> List[AnyStr]:
    os.chdir(dir)
    valid_files = []
    invalid_files = []
    for ft in VALID_FILE_TYPES:
        if substr:
            pattern = f"**/{substr}*.{ft}"
        else:
            pattern = f"**/*.{ft}"
        valid_files.extend(glob.glob(pattern))

    for ft in INVALID_DIRECTORIES:
        invalid_files.extend(glob.glob(f"{ft}/*"))

    return set(valid_files) - set(invalid_files)


def load_images(flags: List) -> Dict[str, Image.Image]:
    images = {}
    for f in flags:
        name = f.split("/")[-1].split(".")[0]
        img = Image.open(f)
        if img.mode != "RBG":
            img = img.convert("RGB")
        images.update({name: img})
        print(f"Loaded image for {name}")
    return images


def generate_counts(images: Dict[str, Image.Image]) -> Dict[str, Dict[Tuple, int]]:
    img_counts = {}
    for name, image in images.items():
        color_counts = {}
        for x in range(image.width):
            for y in range(image.height):
                px = image.getpixel(xy=(x, y))
                if px in color_counts.keys():
                    color_counts[px] += 1
                else:
                    color_counts[px] = 0
        img_counts.update({name: color_counts})
        print(f"Generated pixel counts for {name}")
    return img_counts


def normalize_percentages(
    img_counts: Dict[str, Dict[Tuple, int]]
) -> Dict[str, Dict[Tuple, float]]:
    image_percentages = {}
    for name, counts in img_counts.items():
        percentages = {}
        total = sum(counts.values())
        for px, count in counts.items():
            perc = count / total * 100
            if perc >= PERCENTAGE_THRESHOLD:
                percentages[px] = perc
        image_percentages[name] = percentages
        print(f"Normalized percentages for {name}")
    return image_percentages


def to_pie(percentages: Dict[str, Dict[Tuple, int]], output_dir: str) -> None:
    for name, data in percentages.items():
        weights = []
        colors = []
        for px, perc in data.items():
            weights.append(perc)
            colors.append((px[0] / 255, px[1] / 255, px[2] / 255))
        plt.pie(x=weights, colors=colors)
        plt.savefig(f"{output_dir}/{name}.png", transparent=True)
        plt.close()
        print(f"Graph created for {name}")


def parse_args():
    parser = ArgumentParser()
    parser.add_argument(
        "--input-dir",
        required=False,
        default=os.getcwd(),
        help="Input directory to traverse for image files",
    )
    parser.add_argument(
        "--output-dir",
        required=False,
        default=os.path.join(os.getcwd(), "output"),
        help="Output directory to save image files to",
    )
    parser.add_argument(
        "--substring",
        required=False,
        default=None,
        help="File prefix to perform operation for",
    )
    return parser.parse_args()


def main():
    options = parse_args()
    flags = glob_files(options.input_dir, options.substring)
    print(f"Loading images from {options.input_dir.split('/')[-1]}...")
    images = load_images(flags)
    print("Finished loading images. Generating pixel counts...")
    counts = generate_counts(images)
    print("Finished generating pixel counts. Normalizing image percentages...")
    percentages = normalize_percentages(counts)
    print(
        f"Finished normalizing percentages. Writing output files to {options.output_dir.split('/')[-1]}..."
    )
    to_pie(percentages, options.output_dir)
    print("Completed.")
    return 0


if __name__ == "__main__":
    sys.exit(main())
