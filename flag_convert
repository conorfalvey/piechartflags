#!/usr/bin/env python
import os
import glob
import sys
import math
from argparse import ArgumentParser
from typing import List, AnyStr, Dict, Tuple
from PIL import Image
import matplotlib.pyplot as plt

VALID_FILE_TYPES = ["png"]
INVALID_DIRECTORIES = ["venv", "output"]
PERCENTAGE_THRESHOLD = 0.5


def glob_files(dir: str, substr: str = None) -> List[AnyStr]:
    os.chdir(dir)
    valid_files = []
    invalid_files = []
    for ft in VALID_FILE_TYPES:
        if substr:
            pattern = f"**/{substr}*.{ft}"
        else:
            pattern = f"**/*.{ft}"
        valid_files.extend(glob.glob(pattern, recursive=True))

    for ft in INVALID_DIRECTORIES:
        invalid_files.extend(glob.glob(f"{ft}/*"))

    valid = set(valid_files) - set(invalid_files)
    print(f"Valid files found: {len(valid)}")
    return valid


def load_images(flag: AnyStr) -> Tuple[str, Image.Image]:
    name = flag.split("/")[-1].split(".")[0]
    img = Image.open(flag)
    if img.mode != "RBG":
        img = img.convert("RGB")
    return name, img


def generate_counts(image: Image.Image) -> Dict[Tuple[int, int, int], int]:
    color_counts = {}
    total_px = image.width * image.height - 1
    for px_num in range(total_px):
        xy = (px_num % image.width, math.floor(px_num / image.width))
        px = image.getpixel(xy=xy)
        if px in color_counts.keys():
            color_counts[px] += 1
        else:
            color_counts[px] = 0
    return color_counts


def normalize_percentages(
    counts: Dict[Tuple[int, int, int], int]
) -> Dict[Tuple[int, int, int], float]:
    percentages = {}
    total = sum(counts.values())
    for px, count in counts.items():
        perc = count / total * 100
        if perc >= PERCENTAGE_THRESHOLD:
            percentages[px] = perc
    return percentages


def to_pie(
    percentages: Dict[Tuple[int, int, int], float],
    name: str,
    output_dir: str,
    thumbnail: bool,
) -> None:
    weights = []
    colors = []
    for px, perc in percentages.items():
        weights.append(perc)
        colors.append((px[0] / 255, px[1] / 255, px[2] / 255))

    if thumbnail:
        plt.figure().set_size_inches(15, 10, forward=True)
    plt.pie(x=weights, colors=colors)
    plt.savefig(f"{output_dir}/{name}.png", transparent=True)
    plt.close()
    print(f"Graph created for {name}")


def parse_args():
    parser = ArgumentParser()
    parser.add_argument(
        "--input-dir",
        required=False,
        default=os.getcwd(),
        help="Input directory to traverse for image files",
    )
    parser.add_argument(
        "--output-dir",
        required=False,
        default=os.path.join(os.getcwd(), "output"),
        help="Output directory to save image files to",
    )
    parser.add_argument(
        "--substring",
        required=False,
        default=None,
        help="File prefix to perform operation for",
    )
    parser.add_argument(
        "--thumbnail",
        required=False,
        default=False,
        action="store_true",
        help="Create images sized for sporcle quiz thumbnail",
    )
    return parser.parse_args()


def main():
    options = parse_args()
    input_dir = options.input_dir
    if not os.path.isabs(input_dir):
        input_dir = os.path.join(os.getcwd(), input_dir)
    flags = glob_files(input_dir, options.substring)
    for flag in flags:
        print(f"Loading image: {flag}")
        name, image = load_images(flag)
        print("Generating pixel counts...")
        counts = generate_counts(image)
        print("Normalizing image percentages...")
        percentages = normalize_percentages(counts)
        print(
            f"Writing output file {name}.png to {options.output_dir.split('/')[-1]}..."
        )
        to_pie(percentages, name, options.output_dir, options.thumbnail)
        print("Completed.")
    return 0


if __name__ == "__main__":
    sys.exit(main())
